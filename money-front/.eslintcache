[{"C:\\Users\\JungWoo\\work\\moneyBook\\money-front\\src\\index.js":"1","C:\\Users\\JungWoo\\work\\moneyBook\\money-front\\src\\App.js":"2","C:\\Users\\JungWoo\\work\\moneyBook\\money-front\\src\\reportWebVitals.js":"3","C:\\Users\\JungWoo\\work\\moneyBook\\money-front\\src\\module\\rootReducer.js":"4","C:\\Users\\JungWoo\\work\\moneyBook\\money-front\\src\\components\\FloatingMenu.js":"5","C:\\Users\\JungWoo\\work\\moneyBook\\money-front\\src\\components\\SignIn.js":"6","C:\\Users\\JungWoo\\work\\moneyBook\\money-front\\src\\components\\MainDrawer.js":"7","C:\\Users\\JungWoo\\work\\moneyBook\\money-front\\src\\module\\dateReducer.js":"8","C:\\Users\\JungWoo\\work\\moneyBook\\money-front\\src\\module\\moneyReducer.js":"9","C:\\Users\\JungWoo\\work\\moneyBook\\money-front\\src\\components\\MoneyBookTable\\MoneyTable.js":"10","C:\\Users\\JungWoo\\work\\moneyBook\\money-front\\src\\components\\MoneyBookTable\\TotalTable.js":"11","C:\\Users\\JungWoo\\work\\moneyBook\\money-front\\src\\components\\MoneyBookTable\\StockTable.js":"12","C:\\Users\\JungWoo\\work\\moneyBook\\money-front\\src\\api\\DateApi.js":"13","C:\\Users\\JungWoo\\work\\moneyBook\\money-front\\src\\api\\MoneyBookApi.js":"14","C:\\Users\\JungWoo\\work\\moneyBook\\money-front\\src\\api\\SignApi.js":"15","C:\\Users\\JungWoo\\work\\moneyBook\\money-front\\src\\module\\tagReducer.js":"16","C:\\Users\\JungWoo\\work\\moneyBook\\money-front\\src\\api\\TagApi.js":"17","C:\\Users\\JungWoo\\work\\moneyBook\\money-front\\src\\module\\stockTradingReducer.js":"18","C:\\Users\\JungWoo\\work\\moneyBook\\money-front\\src\\api\\StockTradingApi.js":"19","C:\\Users\\JungWoo\\work\\moneyBook\\money-front\\src\\components\\SignUp.js":"20","C:\\Users\\JungWoo\\work\\moneyBook\\money-front\\src\\api\\StockPersonalApi.js":"21","C:\\Users\\JungWoo\\work\\moneyBook\\money-front\\src\\module\\stockPersonalReducer.js":"22","C:\\Users\\JungWoo\\work\\moneyBook\\money-front\\src\\module\\signReducer.js":"23"},{"size":1306,"mtime":1612280772000,"results":"24","hashOfConfig":"25"},{"size":816,"mtime":1613273568186,"results":"26","hashOfConfig":"25"},{"size":362,"mtime":1611575476000,"results":"27","hashOfConfig":"25"},{"size":967,"mtime":1613274544950,"results":"28","hashOfConfig":"25"},{"size":7836,"mtime":1613636700674,"results":"29","hashOfConfig":"25"},{"size":4082,"mtime":1613286026878,"results":"30","hashOfConfig":"25"},{"size":8521,"mtime":1613628909115,"results":"31","hashOfConfig":"25"},{"size":1246,"mtime":1612793190738,"results":"32","hashOfConfig":"25"},{"size":2148,"mtime":1612792667328,"results":"33","hashOfConfig":"25"},{"size":6600,"mtime":1613631501292,"results":"34","hashOfConfig":"25"},{"size":1310,"mtime":1613629294773,"results":"35","hashOfConfig":"25"},{"size":8889,"mtime":1613640152716,"results":"36","hashOfConfig":"25"},{"size":1352,"mtime":1613640962090,"results":"37","hashOfConfig":"25"},{"size":1622,"mtime":1613640962643,"results":"38","hashOfConfig":"25"},{"size":1147,"mtime":1613640963006,"results":"39","hashOfConfig":"25"},{"size":1461,"mtime":1612791433407,"results":"40","hashOfConfig":"25"},{"size":801,"mtime":1612786122516,"results":"41","hashOfConfig":"25"},{"size":2685,"mtime":1612933262087,"results":"42","hashOfConfig":"25"},{"size":1847,"mtime":1613640963910,"results":"43","hashOfConfig":"25"},{"size":3313,"mtime":1612845725240,"results":"44","hashOfConfig":"25"},{"size":1433,"mtime":1613640963428,"results":"45","hashOfConfig":"25"},{"size":2262,"mtime":1612934808655,"results":"46","hashOfConfig":"25"},{"size":1742,"mtime":1613286090129,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"51"},"1k4yghf",{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"51"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"51"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"51"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"51"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"51"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"51"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"51"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"51"},"C:\\Users\\JungWoo\\work\\moneyBook\\money-front\\src\\index.js",["104"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './App';\nimport createSagaMiddleware from 'redux-saga';\nimport rootReducer, { rootSaga } from './module/rootReducer';\nimport { configureStore, createStore } from '@reduxjs/toolkit';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from 'react-router-dom';\n\n// Saga Middleware 생성\nconst sagaMiddleware = createSagaMiddleware();\n\n// Store Saga Middleware 적용\n// const store = createStore(rootReducer, applyMiddleware)\n// Store Saga Middleware 적용 + redux devtool 적용\n// const store = createStore(rootReducer, composeWithDevTools(applyMiddleware(sagaMiddleware)));\n\nconst store = configureStore({ reducer: rootReducer, middleware: [sagaMiddleware]})\n\n// Saga 실행\nsagaMiddleware.run(rootSaga);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["105","106"],"C:\\Users\\JungWoo\\work\\moneyBook\\money-front\\src\\App.js",[],"C:\\Users\\JungWoo\\work\\moneyBook\\money-front\\src\\reportWebVitals.js",[],"C:\\Users\\JungWoo\\work\\moneyBook\\money-front\\src\\module\\rootReducer.js",[],"C:\\Users\\JungWoo\\work\\moneyBook\\money-front\\src\\components\\FloatingMenu.js",["107","108","109"],"import React from 'react';\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport Fab from '@material-ui/core/Fab';\nimport AddIcon from '@material-ui/icons/Add';\nimport { Button, Dialog, Menu, MenuItem, TextField } from '@material-ui/core';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport MuiDialogContent from '@material-ui/core/DialogContent';\nimport MuiDialogActions from '@material-ui/core/DialogActions';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Typography from '@material-ui/core/Typography';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { createMoney } from '../module/moneyReducer';\nimport { createTag, getTag } from '../module/tagReducer';\nimport { createPersonal, getPersonal } from '../module/stockPersonalReducer';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    '& > *': {\n      margin: theme.spacing(1),\n    },\n    position: 'fixed',\n    right: 50,\n    bottom: 30,\n  },\n  menu: {\n    height: 80,\n    fontWeight: \"bold\"\n  },\n  textfield: {\n    '& .MuiTextField-root': {\n      margin: theme.spacing(1),\n      width: '25ch',\n    },\n  },\n  table: {\n    minWidth: 0,\n  },\n\n}));\n\n\nconst styles = (theme) => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(2),\n  },\n  closeButton: {\n    position: 'absolute',\n    right: theme.spacing(1),\n    top: theme.spacing(1),\n    color: theme.palette.grey[500],\n  },\n})\n\nconst DialogTitle = withStyles(styles)((props) => {\n  const { children, classes, onClose, ...other } = props;\n  return (\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\n      <Typography variant=\"h6\">{children}</Typography>\n      {onClose ? (\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\n          <CloseIcon />\n        </IconButton>\n      ) : null}\n    </MuiDialogTitle>\n  );\n});\n\nconst DialogContent = withStyles((theme) => ({\n  root: {\n    padding: theme.spacing(2),\n  },\n}))(MuiDialogContent);\n\nconst DialogActions = withStyles((theme) => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(1),\n  },\n}))(MuiDialogActions);\n\n\nexport default function FloatingActionButtons() {\n  const classes = useStyles();\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const [open, setOpen] = React.useState(false);\n  const [day, setDay] = React.useState(null);\n  const [context, setContext] = React.useState({});\n  const [amount, setAmount] = React.useState({});\n  const [tag, setTag] = React.useState({});\n  const [year, setYear] = React.useState({});\n  const [month, setMonth] = React.useState({});\n  const [bookData, setBookData] = React.useState({});\n  const [startDate, setStartDate] = React.useState(new Date());\n  const [tagData, setTagData] = React.useState(null);\n  const [tagOpen, setTagOpen] = React.useState(false);\n  const [stockOpen, setStockOpen] = React.useState(false);\n  const [personalData, setPersonalData] = React.useState({});\n  const dispatch = useDispatch();\n\n  const { personaldata } = useSelector(state => state.stockPersonalReducer);\n\n  const handleClick = (e) => {\n    setAnchorEl(e.currentTarget);\n  }\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  }\n\n  const handleOpenMoney = () => {\n    setAnchorEl(null);\n    setOpen(true);\n  }\n\n  const handleCloseMoney = () => {\n    setOpen(false);\n  }\n\n  const handleOpenTag = () => {\n    setAnchorEl(null);\n    setTagOpen(true);\n  }\n\n  const handleCloseTag = () => {\n    setTagOpen(false);\n  }\n\n  const handleOpenStock = () => {\n    setStockOpen(true);\n  }\n\n  const handleCloseStock = () => {\n    setStockOpen(false);\n  }\n\n  const handleMoneyCreate = () => {\n    setBookData({\n      year: year,\n      month: month,\n      day: day,\n      context: context,\n      amount: amount,\n      tag: tag\n    })\n    dispatch(createMoney(bookData));\n  }\n\n  const handleTagCreate = () => {\n    console.log(tagData);\n    dispatch(createTag(tagData));\n    setTimeout(() => {\n      dispatch(getTag()); \n    }, 1000); \n  }\n\n  const handlePersonalCreate = () => {\n    dispatch(createPersonal(personalData));\n    setTimeout(() => {\n      dispatch(getPersonal()); \n    }, 1000); \n  }\n\n  return (\n    <div>\n      <Fab className={classes.root} color=\"primary\" aria-label=\"add\" aria-haspopup=\"true\" onClick={handleClick} >\n        <AddIcon />\n      </Fab>\n      <Menu \n          id=\"floating-menu\"\n          anchorEl={anchorEl}\n          keepMounted\n          open={Boolean(anchorEl)}\n          onClose={handleClose}\n        >\n          <MenuItem onClick={handleOpenMoney} className={classes.menu} >가계부 기입</MenuItem>\n          <MenuItem onClick={handleOpenTag} className={classes.menu} >커스텀태그 관리</MenuItem>\n          <MenuItem onClick={handleOpenStock} className={classes.menu} >관심주 관리</MenuItem>\n        </Menu>\n\n        {//\n        }\n        <Dialog open={open}>\n          <DialogTitle onClose={handleCloseMoney}>\n            가계부 생성\n          </DialogTitle>\n          <DialogContent dividers>        \n            <form className={classes.textfield} noValidate autoComplete=\"off\">\n              <TextField id=\"year\" label=\"년도\" variant=\"filled\" type=\"number\" onChange={(e) => {setYear(e.target.value)}} />\n              <TextField id=\"month\" label=\"월\" variant=\"filled\" type=\"number\" onChange={(e) => {setMonth(e.target.value)}} />\n              <TextField id=\"day\" label=\"날짜\" variant=\"filled\" onChange={(e) => {setDay(e.target.value)}} />\n              <TextField id=\"context\" label=\"내용\" variant=\"filled\" onChange={(e) => {setContext(e.target.value)}}/>\n              <TextField id=\"amount\" type=\"number\" label=\"금액\" variant=\"filled\" onChange={(e) => {setAmount(e.target.value)}}/>\n              <TextField id=\"tag\" label=\"태그\" variant=\"filled\"onChange={(e) => {setTag(e.target.value)}} />\n            </form>        \n          </DialogContent>\n          <DialogActions>\n            <Button autoFocus color=\"primary\" onClick={() => handleMoneyCreate()} >\n                생성\n            </Button>\n          </DialogActions>\n        </Dialog>\n\n        {//\n        }\n        <Dialog open={tagOpen}>\n          <DialogTitle onClose={handleCloseTag}>\n            태그 관리\n          </DialogTitle>\n          <DialogContent dividers>        \n            <form className={classes.textfield} noValidate autoComplete=\"off\">\n              <TextField id=\"tagname\" label=\"태그 이름\" variant=\"filled\" onChange={(e) => {setTagData(e.target.value)}} />\n            </form>        \n          </DialogContent>\n          <DialogActions>\n            <Button autoFocus color=\"primary\" onClick={() => handleTagCreate()} >\n                생성\n            </Button>\n          </DialogActions>\n        </Dialog>\n\n        {//\n        }\n        <Dialog open={stockOpen}>\n          <DialogTitle onClose={handleCloseStock}>\n            관심주 관리\n          </DialogTitle>\n          <DialogContent dividers>        \n            <form className={classes.textfield} noValidate autoComplete=\"off\">\n              <TextField id=\"tickername\" label=\"티커\" variant=\"filled\" onChange={(e) => {setPersonalData({...personalData, ticker:e.target.value})}} />\n              <TextField id=\"targetquantity\" label=\"목표 수량\" variant=\"filled\" type=\"number\" onChange={(e) => {setPersonalData({...personalData, targetquantity:e.target.value})}} />\n              <TextField id=\"currentquantity\" label=\"보유 수량\" variant=\"filled\" type=\"number\" onChange={(e) => {setPersonalData({...personalData, currentquantity:e.target.value})}} />\n            </form> \n          </DialogContent>\n          <DialogActions>\n            <Button autoFocus color=\"primary\" onClick={() => handlePersonalCreate()} >\n              생성\n            </Button>\n          </DialogActions>\n        </Dialog>\n\n    </div>\n  );\n}","C:\\Users\\JungWoo\\work\\moneyBook\\money-front\\src\\components\\SignIn.js",["110"],"import React, { useEffect } from 'react';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport Link from '@material-ui/core/Link';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport { signIn } from '../module/signReducer';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\n\nfunction Copyright() {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n      {'Copyright © '}\n      <Link color=\"inherit\" href=\"https://material-ui.com/\">\n        Your Website\n      </Link>{' '}\n      {new Date().getFullYear()}\n      {'.'}\n    </Typography>\n  );\n}\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: '100%', // Fix IE 11 issue.\n    marginTop: theme.spacing(1),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\nexport default function SignIn() {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n\n  const { username } = useSelector(state => state.signReducer );\n\n  const [userName, setUserName] = React.useState(null);\n  const [passWord, setPassWord] = React.useState(null);\n\n  const handleUserChange = (e) => {\n    setUserName(e.target.value);\n  }\n\n  const handlePassChange = (e) => {\n    setPassWord(e.target.value);\n  }\n\n  const handleSubmit = () => {    \n    dispatch(signIn(userName, passWord));    \n    if(sessionStorage.getItem('username') !== null) {\n      //window.history.pushState({data: null}, 'push to main', '/main');\n      //window.location.replace('/main')\n      window.location.href = '/main'\n    }\n  }\n\n  useEffect(() => {      \n    try {  \n      if(sessionStorage.getItem('username') !== null) {\n        //window.history.pushState({data: null}, 'push to main', '/main');\n        //window.location.replace('/main')\n        window.location.href = '/main'\n      }\n    } catch (error) {\n      console.log(error);\n    }            \n  },[username])\n\n  return (\n    <Container component=\"main\" maxWidth=\"xs\">\n      <CssBaseline />\n      <div className={classes.paper}>\n        <Avatar className={classes.avatar}>\n          <LockOutlinedIcon />\n        </Avatar>\n        <Typography component=\"h1\" variant=\"h5\">\n          Sign in\n        </Typography>\n        <form className={classes.form} noValidate>\n          <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            required\n            fullWidth\n            id=\"user name\"\n            label=\"User Name\"\n            name=\"username\"\n            autoComplete=\"username\"\n            onChange={handleUserChange}\n            autoFocus\n          />\n          <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            required\n            fullWidth\n            name=\"password\"\n            label=\"Password\"\n            type=\"password\"\n            id=\"password\"\n            onChange={handlePassChange}\n            autoComplete=\"current-password\"\n          />\n          <Button\n            fullWidth\n            variant=\"contained\"\n            color=\"primary\"\n            className={classes.submit}\n            onClick={handleSubmit}\n          >\n            Sign In\n          </Button>\n          <Grid container>            \n            <Grid item>\n              <Link href=\"#\" variant=\"body2\">\n                {\"Don't have an account? Sign Up\"}\n              </Link>\n            </Grid>\n          </Grid>\n        </form>\n      </div>\n      <Box mt={8}>\n        <Copyright />\n      </Box>\n    </Container>\n  );\n}","C:\\Users\\JungWoo\\work\\moneyBook\\money-front\\src\\components\\MainDrawer.js",["111","112","113","114","115","116"],"import React, { useEffect } from 'react';\nimport clsx from 'clsx';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport Drawer from '@material-ui/core/Drawer';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport List from '@material-ui/core/List';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\nimport MailIcon from '@material-ui/icons/Mail';\nimport HomeIcon from '@material-ui/icons/Home';\nimport ExpandLess from '@material-ui/icons/ExpandLess';\nimport ExpandMore from '@material-ui/icons/ExpandMore';\nimport CalendarIcon from '@material-ui/icons/CalendarToday';\nimport { Button, Collapse, Grid, ListSubheader, Table } from '@material-ui/core';\nimport MoneyTable from './MoneyBookTable/MoneyTable';\nimport StockTable from './MoneyBookTable/StockTable';\nimport TotalTable from './MoneyBookTable/TotalTable';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getDateAcync, getDateFunc, timeRev } from '../module/dateReducer';\nimport { signOut } from '../module/signReducer';\nimport { Redirect } from 'react-router-dom';\n\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n      display: 'flex',\n    },\n    appBar: {\n      transition: theme.transitions.create(['margin', 'width'], {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.leavingScreen,\n      }),\n    },\n    appBarShift: {\n      width: `calc(100% - ${drawerWidth}px)`,\n      marginLeft: drawerWidth,\n      transition: theme.transitions.create(['margin', 'width'], {\n        easing: theme.transitions.easing.easeOut,\n        duration: theme.transitions.duration.enteringScreen,\n      }),\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n    },\n    hide: {\n      display: 'none',\n    },\n    drawer: {\n      width: drawerWidth,\n      flexShrink: 0,\n    },\n    drawerPaper: {\n      width: drawerWidth,\n    },\n    drawerHeader: {\n      display: 'flex',\n      alignItems: 'center',\n      padding: theme.spacing(0, 1),\n      // necessary for content to be below app bar\n      ...theme.mixins.toolbar,\n      justifyContent: 'flex-end',\n    },\n    content: {\n      flexGrow: 1,\n      padding: theme.spacing(3),\n      marginTop: theme.spacing(4),\n      transition: theme.transitions.create('margin', {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.leavingScreen,\n      }),\n      marginLeft: -drawerWidth,\n    },\n    contentShift: {\n      transition: theme.transitions.create('margin', {\n        easing: theme.transitions.easing.easeOut,\n        duration: theme.transitions.duration.enteringScreen,\n      }),\n      marginLeft: 0,\n    },\n    nested: {\n      paddingLeft: theme.spacing(4),\n    },\n    tableRoot: {\n      flexGrow: 1,\n    },\n    logout: {\n      position: 'fixed',\n      right: 50,\n    }\n  }));\n\n  export default function MainDrawer() {\n    const classes = useStyles();\n    const theme = useTheme();\n    const [open, setOpen] = React.useState(true);\n    const [nestedOpen, setNestedOpen] = React.useState(false);\n    \n    const dispatch = useDispatch();\n\n    const { date } = useSelector(state => state.dateReducer);\n    const { username } = useSelector(state => state.signReducer);\n    //const { moneydate } = useSelector(state => state.MoneyReducer);\n\n    const handleDrawerOpen = () => {\n      setOpen(true);\n    };\n  \n    const handleDrawerClose = () => {\n      setOpen(false);\n    };\n  \n    const handleNested = () => {\n      setNestedOpen(!nestedOpen);\n    }\n\n    const handleDate = (year,month) => {\n      dispatch(timeRev(year,month));\n    }\n\n    const handleLogOut = () => {\n      dispatch(signOut());\n      if(sessionStorage.getItem('username') === null) {\n        //window.history.replaceState({data: null}, 'push to login', '/');\n        //window.location.reload();\n        window.location.href = '/'\n      }\n    }\n\n    useEffect(() => {      \n      try {\n        dispatch(getDateAcync());         \n      } catch (error) {\n        console.log(error);\n      }              \n    },[dispatch])\n\n    useEffect(() => {      \n      if(sessionStorage.getItem('username') === null) {\n        //window.history.replaceState({data: null}, 'push to login', '/');\n        //window.location.reload();\n        window.location.href = '/'\n      }\n    },[username])    \n\n    if(!date) return(\n      <div>\n        loading...\n      </div>\n    )\n      return (\n        <div className={classes.root}>\n          <CssBaseline />\n          <AppBar\n            position=\"fixed\"\n            className={clsx(classes.appBar, {\n              [classes.appBarShift]: open,\n            })}\n          >\n            <Toolbar>\n              <IconButton\n                color=\"inherit\"\n                aria-label=\"open drawer\"\n                onClick={handleDrawerOpen}\n                edge=\"start\"\n                className={clsx(classes.menuButton, open && classes.hide)}\n              >\n                <MenuIcon />\n              </IconButton>\n              <Typography variant=\"h6\" noWrap>\n                Money Book\n              </Typography>\n              <Button className={clsx(classes.logout)} onClick={handleLogOut}>\n                <Typography variant=\"h6\" noWrap>\n                  LOGOUT\n                </Typography>\n              </Button>\n            </Toolbar>\n          </AppBar>\n          <Drawer\n            className={classes.drawer}\n            variant=\"persistent\"\n            anchor=\"left\"\n            open={open}\n            classes={{\n              paper: classes.drawerPaper,\n            }}\n          >\n            <div className={classes.drawerHeader}>\n              <h5 className={classes.drawerPaper}>\n              </h5>\n              <IconButton onClick={handleDrawerClose}>\n                {theme.direction === 'ltr' ? <ChevronLeftIcon /> : <ChevronRightIcon />}\n              </IconButton>\n            </div>\n            <Divider />\n            <List>    \n              {\n                date.date.map((split) => (\n                  <List key={split.year}>\n                    <ListItem button onClick={handleNested} >\n                      <ListItemIcon> <CalendarIcon /> </ListItemIcon>\n                      <ListItemText primary={split.year + '년'} />\n                      {nestedOpen ? <ExpandLess /> : <ExpandMore />}\n                    </ListItem>\n                    <Collapse in={nestedOpen} timeout=\"auto\" unmountOnExit>\n                    {\n                      split.monthArr.map((list) => (\n                        <ListItem button className={classes.nested} onClick={() => handleDate(split.year,list)} key={split.year + list} >\n                          <ListItemText primary={list + '월'} />\n                        </ListItem>\n                      ))\n                    }\n                    </Collapse>\n                  </List>\n\n                ))\n              }                  \n            </List>\n            <Divider />\n            <List component=\"div\" subheader={\n              <ListSubheader component=\"div\" id=\"subheader\">\n                카테고리\n              </ListSubheader>\n            } >\n              <TotalTable />\n            </List>\n            <Divider />\n          </Drawer>\n          <main\n            className={clsx(classes.content, {\n              [classes.contentShift]: open,\n            })}\n          >\n            <div />\n            {/* 여기에 다음 컴포넌트 */}\n            <Grid container className={classes.tableRoot} spacing={10} direction=\"row\">\n              <Grid item>        \n                <MoneyTable /> \n              </Grid >\n              <Grid item> \n                <Grid container spacing={2} direction=\"column\">                \n                  <Grid item>        \n                    <StockTable />                  \n                  </Grid >\n                </Grid>   \n              </Grid >            \n            </Grid>\n          </main>\n        </div>\n      );  \n  }","C:\\Users\\JungWoo\\work\\moneyBook\\money-front\\src\\module\\dateReducer.js",[],"C:\\Users\\JungWoo\\work\\moneyBook\\money-front\\src\\module\\moneyReducer.js",[],"C:\\Users\\JungWoo\\work\\moneyBook\\money-front\\src\\components\\MoneyBookTable\\MoneyTable.js",["117","118","119"],"import React, { useEffect } from 'react';\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport MuiDialogContent from '@material-ui/core/DialogContent';\nimport MuiDialogActions from '@material-ui/core/DialogActions';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert from '@material-ui/lab/Alert';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Typography from '@material-ui/core/Typography';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Button, Dialog, TextField } from '@material-ui/core';\nimport { deleteMoney, getMoney, updateMoney } from '../../module/moneyReducer';\n\n// 스타일 정의\n\nconst useStyles = makeStyles((theme) =>({\n  root: {\n    width: '100%',\n    '& > * + *': {\n      marginTop: theme.spacing(2),\n    },\n  },\n  table: {\n    minWidth: 1000,\n  },\n  textfield: {\n    '& .MuiTextField-root': {\n      margin: theme.spacing(1),\n      width: '25ch',\n    },\n  },\n}));\n\nconst styles = (theme) => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(2),\n  },\n  closeButton: {\n    position: 'absolute',\n    right: theme.spacing(1),\n    top: theme.spacing(1),\n    color: theme.palette.grey[500],\n  },\n})\n\nconst DialogTitle = withStyles(styles)((props) => {\n  const { children, classes, onClose, ...other } = props;\n  return (\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\n      <Typography variant=\"h6\">{children}</Typography>\n      {onClose ? (\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\n          <CloseIcon />\n        </IconButton>\n      ) : null}\n    </MuiDialogTitle>\n  );\n});\n\nconst DialogContent = withStyles((theme) => ({\n  root: {\n    padding: theme.spacing(2),\n  },\n}))(MuiDialogContent);\n\nconst DialogActions = withStyles((theme) => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(1),\n  },\n}))(MuiDialogActions);\n\nfunction Alert(props) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nexport default function MoneyTable() {\n  const classes = useStyles();\n  const [open, setOpen] = React.useState(false);\n  const [snack, setSnack] = React.useState(false);\n  const [data, setData] = React.useState(null);\n  const [startDate, setStartDate] = React.useState(new Date());\n  const [year, setYear] = React.useState(startDate.getFullYear());\n  const [month, setMonth] = React.useState(startDate.getMonth() + 1);\n  const dispatch = useDispatch();\n\n  const { time } = useSelector(state => state.dateReducer);\n  const { moneydate } = useSelector(state => state.moneyReducer);\n\n  useEffect(() => {      \n    try {\n      if(time.year) {\n        dispatch(getMoney(time.year,time.month)); \n      }\n    } catch (error) {\n      console.log(error);\n    }      \n  },[dispatch, time])\n\n  const handleClickOpen = (row) => {\n    setData({\n      id: row.id,\n      day: row.day,\n      context: row.context,\n      amount: row.amount,\n      year: year,\n      month: month,\n      tag: row.tag\n    });\n\n    setOpen(true);\n  }\n\n  const handleClose = () => {\n    setOpen(false);\n  }\n\n  const handleDelete = (id) => {\n    setSnack(true);\n    dispatch(deleteMoney(id));\n    setInterval(() => {\n      dispatch(getMoney(time.year, time.month))\n    }, 1000);\n  }\n\n  const handleUpdate = (id) => {\n    setSnack(true);\n    dispatch(updateMoney(id, data));\n    setInterval(() => {\n      dispatch(getMoney(time.year, time.month))\n    }, 1000);\n  }\n\n  const handleSnackClose = () => {\n    setSnack(false);\n  }\n\n  return (\n    <div>\n    <TableContainer component={Paper}>\n      <Table className={classes.table} aria-label=\"simple table\">\n        <TableHead>\n          <TableRow>\n            <TableCell>날짜</TableCell>\n            <TableCell>내용</TableCell>\n            <TableCell>금액</TableCell>\n            <TableCell>태그</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {\n          moneydate && moneydate.map((row) => (            \n            <TableRow key={row.id} hover onClick={() => handleClickOpen(row)}>\n              <TableCell component=\"th\" scope=\"row\">{row.day}</TableCell>\n              <TableCell>{row.context}</TableCell>\n              <TableCell>{row.amount}</TableCell>\n              <TableCell>{row.tag}</TableCell>\n              \n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n    {\n      data && \n      <Dialog open={open}>\n      <DialogTitle onClose={handleClose}>\n        가계부 수정\n      </DialogTitle>\n      <DialogContent dividers>        \n          <form className={classes.textfield} noValidate autoComplete=\"off\">\n            <TextField id=\"year\" label=\"년도\" defaultValue={year} variant=\"filled\" type=\"number\" onChange={(e) => {setData({...data, year: e.target.value})}} />\n            <TextField id=\"month\" label=\"월\" defaultValue={month} variant=\"filled\" type=\"number\" onChange={(e) => {setData({...data, month: e.target.value})}} />\n            <TextField id=\"date\" label=\"날짜\" defaultValue={data.day} variant=\"filled\" onChange={(e) => {setData({...data, day: e.target.value})}} />\n            <TextField id=\"context\" label=\"내용\" defaultValue={data.context} variant=\"filled\" onChange={(e) => {setData({...data, context: e.target.value})}} />\n            <TextField id=\"amount\" label=\"금액\" defaultValue={data.amount} variant=\"filled\" type=\"number\" onChange={(e) => {setData({...data, amount: e.target.value})}} />\n            <TextField id=\"tag\" label=\"태그\" defaultValue={data.tag} variant=\"filled\" onChange={(e) => {setData({...data, tag: e.target.value})}} />\n          </form>        \n      </DialogContent>\n      <DialogActions>\n        <Button autoFocus color=\"primary\" onClick={() => handleUpdate(data.id)}>\n            수정\n        </Button>\n        <Button autoFocus color=\"secondary\" onClick={() => handleDelete(data.id)}>\n            삭제\n        </Button>\n      </DialogActions>\n      </Dialog>\n    }\n    <Snackbar open={snack} autoHideDuration={2000}  onClose={handleSnackClose}>\n      <Alert onClose={handleSnackClose} severiry=\"info\">\n        alert\n      </Alert>\n    </Snackbar>\n\n    </div>\n  );\n\n \n}","C:\\Users\\JungWoo\\work\\moneyBook\\money-front\\src\\components\\MoneyBookTable\\TotalTable.js",["120"],"import React, { useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteTag, getTag } from '../../module/tagReducer';\nimport { ListItem } from '@material-ui/core';\n\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 0,\n  },\n});\n\nfunction createData(id, tag) {\n  return {id, tag };\n}\n\nconst rows = [\n  createData( 1, \"BASIC 1\"),\n  createData( 2, \"BASIC 2\"),\n  createData( 3, \"BASIC 3\"),\n  createData( 4, \"BASIC 4\"),\n];\n\nexport default function TotalTable() {\n  const classes = useStyles();\n  const { tags } = useSelector(state => state.tagReducer);\n  const dispatch = useDispatch();\n\n  useEffect(() => {      \n    try {\n      dispatch(getTag()); \n    } catch (error) {\n      console.log(error);\n    }      \n  },[dispatch])\n\n  const handleClick = (id) => {\n    console.log(id)\n    dispatch(deleteTag(id));\n    setTimeout(() => {\n      dispatch(getTag());\n    }, 1000);\n  }\n\n  return (\n    <div>\n      {\n        rows.map((row) => (\n          <ListItem button >\n            {row.tag}\n          </ListItem>\n        ))\n      }\n      {\n        tags && tags.map((row) => (\n          <ListItem button onClick={() => handleClick(row.id)}>\n            {row.tag}\n          </ListItem>\n        ))\n      }\n    </div>\n  );\n}","C:\\Users\\JungWoo\\work\\moneyBook\\money-front\\src\\components\\MoneyBookTable\\StockTable.js",["121","122","123","124","125","126","127","128","129"],"import React, { useEffect } from 'react';\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport MuiDialogContent from '@material-ui/core/DialogContent';\nimport MuiDialogActions from '@material-ui/core/DialogActions';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Typography from '@material-ui/core/Typography';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteTrading, getStockByTicker, updateTrading } from '../../module/stockTradingReducer';\nimport { getStockPersonal } from '../../api/StockPersonalApi';\nimport { deletePersonal, getPersonal } from '../../module/stockPersonalReducer';\nimport { TextField } from '@material-ui/core';\nimport { updateStockTrading } from '../../api/StockTradingApi';\n\nconst useStyles = makeStyles((theme) =>({\n  table: {\n    minWidth: 0,\n  },\n  textfield: {\n    '& .MuiTextField-root': {\n      margin: theme.spacing(1),\n      width: '25ch',\n    },\n  },\n}));\n\nconst styles = (theme) => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(2),\n  },\n  closeButton: {\n    position: 'absolute',\n    right: theme.spacing(1),\n    top: theme.spacing(1),\n    color: theme.palette.grey[500],\n  },\n});\n\nconst DialogTitle = withStyles(styles)((props) => {\n  const { children, classes, onClose, ...other } = props;\n  return (\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\n      <Typography variant=\"h6\">{children}</Typography>\n      {onClose ? (\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\n          <CloseIcon />\n        </IconButton>\n      ) : null}\n    </MuiDialogTitle>\n  );\n});\n\nconst DialogContent = withStyles((theme) => ({\n  root: {\n    padding: theme.spacing(2),\n  },\n}))(MuiDialogContent);\n\nconst DialogActions = withStyles((theme) => ({\n  root: {\n    margin: 0,\n    padding: theme.spacing(1),\n  },\n}))(MuiDialogActions);\n\nexport default function StockTable() {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const [open, setOpen] = React.useState(false);\n  const [changeOpen, setChangeOpen] = React.useState(false);\n  const [data, setData] = React.useState({});\n  const [startDate, setStartDate] = React.useState(new Date());\n  const [year, setYear] = React.useState(startDate.getFullYear());\n  const [month, setMonth] = React.useState(startDate.getMonth() + 1);\n  const [stockPersonalId, setStockPersonalId] = React.useState(null);\n  const [stockPersonalData, setStockPersonalData] = React.useState({});\n  \n\n  const { time } = useSelector(state => state.dateReducer);\n  const { tradingdata } = useSelector(state => state.stockTradingReducer);\n  const { personaldata } = useSelector(state => state.stockPersonalReducer);\n\n  useEffect(() => {      \n    try {           \n      dispatch(getPersonal());      \n    } catch (error) {\n      console.log(error);\n    }      \n  },[dispatch])\n\n  const handleClick = (row) => {\n    setOpen(true);\n    setStockPersonalId(row.id);\n    try {\n      dispatch(getStockByTicker(row.ticker));\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  const handleChange = (row) => {\n    setData({\n      id: row.id,\n      day: row.day,\n      ticker: row.ticker,\n      price: row.price,\n      year: year,\n      month: month,\n      stockquantity: row.stockquantity\n    });\n    setChangeOpen(true);\n  }\n\n  const handleChageClose = () => {\n    setChangeOpen(false);\n  }\n\n  const handleClose = () => {\n    setOpen(false);\n  }\n\n  const handleDelete = () => {\n    dispatch(deleteTrading(data.id));  \n  }\n\n  const handleUpdate = () => {\n    dispatch(updateTrading(data.id, data));\n  }\n\n  const handlePersonalDelete = () => {\n    dispatch(deletePersonal(stockPersonalId));\n    setTimeout(() => {\n      dispatch(getPersonal()); \n    }, 1000); \n  }\n\n  const handleUpdatePersonal = () => {\n\n  }\n\n  return (\n    <div>\n    <TableContainer component={Paper}>\n      <Table className={classes.table} aria-label=\"simple table\">\n        <TableHead>\n          <TableRow >\n            <TableCell>티커</TableCell>\n            <TableCell>목표 수량</TableCell> \n            <TableCell>보유 수량</TableCell>   \n            <TableCell></TableCell>               \n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {personaldata && personaldata.map((row) => (       \n            <TableRow key={row.id} hover  >\n              <TableCell component=\"th\" scope=\"row\" onClick={() => handleClick(row)}>\n                {row.ticker}\n              </TableCell>\n              <TableCell onClick={() => handleClick(row)}>{row.targetquantity}</TableCell>\n              <TableCell onClick={() => handleClick(row)}>{row.currentquantity}</TableCell>\n              <TableCell padding=\"none\" >\n                <Button color=\"primary\" variant=\"contained\">수정</Button>\n                <Button color=\"secondary\" variant=\"contained\" onClick={(e) => handlePersonalDelete(e)}>삭제</Button>\n                </TableCell>             \n            </TableRow>                 \n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n    <Dialog onClose={handleClose} aria-labelledby=\"stock_modal\" open={open}>\n        <DialogTitle id=\"stock_modal\" onClose={handleClose}>\n          거래 내역\n        </DialogTitle>\n        <DialogContent dividers>\n          <TableContainer component={Paper}>\n            <Table className={classes.table} aria-label=\"stock_table\">\n              <TableHead>\n                <TableRow>\n                  <TableCell>거래 날짜</TableCell>\n                  <TableCell>티커</TableCell> \n                  <TableCell>가격</TableCell>  \n                  <TableCell>거래량</TableCell>                      \n                </TableRow>\n              </TableHead>\n              <TableBody>\n              {tradingdata && tradingdata.map((row) => (            \n                <TableRow key={row.id} hover onClick={() => handleChange(row)}>\n                  <TableCell component=\"th\" scope=\"row\">{row.day}</TableCell>\n                  <TableCell>{row.ticker}</TableCell>\n                  <TableCell>{row.price}</TableCell>\n                  <TableCell>{row.stockquantity}</TableCell>                  \n                </TableRow>\n              ))}\n              </TableBody>\n            </Table>\n          </TableContainer>        \n        </DialogContent>\n        <DialogActions>    \n          <Button color=\"primary\">\n            거래 내역 생성\n          </Button> \n          <Button color=\"primary\">\n            관심주 수정\n          </Button> \n          <Button onClick={() => handlePersonalDelete()} color=\"secondary\">\n            관심주 삭제\n          </Button>      \n        </DialogActions>\n      </Dialog>\n\n      <Dialog onClose={handleChageClose} open={changeOpen} >\n      <DialogTitle id=\"stock_modal\" onClose={handleChageClose}>\n           내역 수정\n        </DialogTitle>\n        <DialogContent dividers>\n          <form className={classes.textfield} noValidate autoComplete=\"off\">\n              <TextField id=\"year\" label=\"년도\" defaultValue={year} variant=\"filled\" type=\"number\" onChange={(e) => {setData({...data, year: e.target.value})}} />\n              <TextField id=\"month\" label=\"월\" defaultValue={month} variant=\"filled\" type=\"number\" onChange={(e) => {setData({...data, month: e.target.value})}} />\n              <TextField id=\"date\" label=\"날짜\" defaultValue={data.day} variant=\"filled\" type=\"number\" onChange={(e) => {setData({...data, day: e.target.value})}} />\n              <TextField id=\"ticker\" label=\"티커\" defaultValue={data.ticker} variant=\"filled\" onChange={(e) => {setData({...data, ticker: e.target.value})}} />\n              <TextField id=\"price\" label=\"금액\" defaultValue={data.price} variant=\"filled\" type=\"number\" onChange={(e) => {setData({...data, price: e.target.value})}} />\n              <TextField id=\"stockweight\" label=\"수량\" defaultValue={data.stockquantity} variant=\"filled\" onChange={(e) => {setData({...data, stockquantity: e.target.value})}} />\n          </form>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => handleUpdate()} color=\"primary\">\n            수정\n          </Button>\n          <Button onClick={() => handleDelete()} color=\"secondary\">\n            삭제\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}","C:\\Users\\JungWoo\\work\\moneyBook\\money-front\\src\\api\\DateApi.js",[],"C:\\Users\\JungWoo\\work\\moneyBook\\money-front\\src\\api\\MoneyBookApi.js",[],"C:\\Users\\JungWoo\\work\\moneyBook\\money-front\\src\\api\\SignApi.js",[],"C:\\Users\\JungWoo\\work\\moneyBook\\money-front\\src\\module\\tagReducer.js",[],"C:\\Users\\JungWoo\\work\\moneyBook\\money-front\\src\\api\\TagApi.js",[],"C:\\Users\\JungWoo\\work\\moneyBook\\money-front\\src\\module\\stockTradingReducer.js",[],"C:\\Users\\JungWoo\\work\\moneyBook\\money-front\\src\\api\\StockTradingApi.js",[],"C:\\Users\\JungWoo\\work\\moneyBook\\money-front\\src\\components\\SignUp.js",["130"],"import React from 'react';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport Link from '@material-ui/core/Link';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\n\nfunction Copyright() {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n      {'Copyright © '}\n      <Link color=\"inherit\" href=\"https://material-ui.com/\">\n        Your Website\n      </Link>{' '}\n      {new Date().getFullYear()}\n      {'.'}\n    </Typography>\n  );\n}\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: '100%', // Fix IE 11 issue.\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\nexport default function SignUp() {\n  const classes = useStyles();\n\n  return (\n    <Container component=\"main\" maxWidth=\"xs\">\n      <CssBaseline />\n      <div className={classes.paper}>\n        <Avatar className={classes.avatar}>\n          <LockOutlinedIcon />\n        </Avatar>\n        <Typography component=\"h1\" variant=\"h5\">\n          Sign up\n        </Typography>\n        <form className={classes.form} noValidate>\n          <Grid container spacing={2}>\n            <Grid item xs={12}>\n              <TextField\n                autoComplete=\"fname\"\n                name=\"id\"\n                variant=\"outlined\"\n                required\n                fullWidth\n                id=\"id\"\n                label=\"ID\"\n                autoFocus\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                variant=\"outlined\"\n                required\n                fullWidth\n                id=\"email\"\n                label=\"Email Address\"\n                name=\"email\"\n                autoComplete=\"email\"\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                variant=\"outlined\"\n                required\n                fullWidth\n                name=\"password\"\n                label=\"Password\"\n                type=\"password\"\n                id=\"password\"\n                autoComplete=\"current-password\"\n              />\n            </Grid>\n          </Grid>\n          <Button\n            type=\"submit\"\n            fullWidth\n            variant=\"contained\"\n            color=\"primary\"\n            className={classes.submit}\n          >\n            Sign Up\n          </Button>\n          <Grid container justify=\"flex-end\">\n            <Grid item>\n              <Link href=\"#\" variant=\"body2\">\n                Already have an account? Sign in\n              </Link>\n            </Grid>\n          </Grid>\n        </form>\n      </div>\n      <Box mt={5}>\n        {/*<Copyright />*/}\n      </Box>\n    </Container>\n  );\n}","C:\\Users\\JungWoo\\work\\moneyBook\\money-front\\src\\api\\StockPersonalApi.js",[],"C:\\Users\\JungWoo\\work\\moneyBook\\money-front\\src\\module\\stockPersonalReducer.js",[],"C:\\Users\\JungWoo\\work\\moneyBook\\money-front\\src\\module\\signReducer.js",["131"],"import * as API from '../api/SignApi';\nimport { call, put, takeEvery } from 'redux-saga/effects';\nimport { createAction, createReducer } from '@reduxjs/toolkit';\n\n// Action Type\nconst SIGN_IN = 'SIGN_IN';\nconst RELOAD = 'RELOAD';\nconst SIGN_OUT = 'SIGN_OUT';\nconst SIGN_OUT_RELOAD = 'SIGN_OUT_RELOAD';\nconst SIGN_UP = 'SIGN_UP';\n\n// Action Creator\nexport const signIn = createAction(SIGN_IN, (username, password) => ({payload: {username, password}}));\nexport const reload = createAction(RELOAD, (username) => ({payload: {username}}));\nexport const signOut = createAction(SIGN_OUT);\nexport const signOutReload = createAction(SIGN_OUT_RELOAD);\nexport const signUp = createAction(SIGN_UP, (username, password, email) => ({payload: {username, password, email}}));\n\n// Main Saga\nexport function* signSaga() {\n    //yield takeEvery(GET_DATE_FUNC, getDateSaga);\n    yield takeEvery(signIn, signInSaga)\n    yield takeEvery(signOut, signOutSaga)\n    //yield takeEvery(signUp, signUpSaga)\n}\n\n// getDate Saga\nfunction* signInSaga({payload}) {\n    const response = yield call(API.signIn, payload.username, payload.password);\n    yield put(reload(response)) //put -> dispatch\n}\n\nfunction* signOutSaga() {\n    const response = yield call(API.signOut);\n    yield put(signOutReload()) //put -> dispatch\n}\n\n// initState\nconst initialState = {\n    username: sessionStorage.getItem(\"username\")\n};\n\n// Toolkit Reducer\nexport default createReducer(initialState, {\n    [RELOAD]: (state, {payload: data}) => {       \n        \n        sessionStorage.setItem(\"username\", data.username);\n        state.username = data.username\n    },\n    [SIGN_OUT_RELOAD]: (state) => {       \n        sessionStorage.removeItem(\"username\");\n        state.username = null\n    },\n    \n})",{"ruleId":"132","severity":1,"message":"133","line":8,"column":26,"nodeType":"134","messageId":"135","endLine":8,"endColumn":37},{"ruleId":"136","replacedBy":"137"},{"ruleId":"138","replacedBy":"139"},{"ruleId":"132","severity":1,"message":"140","line":95,"column":10,"nodeType":"134","messageId":"135","endLine":95,"endColumn":19},{"ruleId":"132","severity":1,"message":"141","line":95,"column":21,"nodeType":"134","messageId":"135","endLine":95,"endColumn":33},{"ruleId":"132","severity":1,"message":"142","line":102,"column":11,"nodeType":"134","messageId":"135","endLine":102,"endColumn":23},{"ruleId":"132","severity":1,"message":"143","line":15,"column":10,"nodeType":"134","messageId":"135","endLine":15,"endColumn":18},{"ruleId":"132","severity":1,"message":"144","line":18,"column":8,"nodeType":"134","messageId":"135","endLine":18,"endColumn":17},{"ruleId":"132","severity":1,"message":"145","line":19,"column":8,"nodeType":"134","messageId":"135","endLine":19,"endColumn":16},{"ruleId":"132","severity":1,"message":"146","line":20,"column":8,"nodeType":"134","messageId":"135","endLine":20,"endColumn":16},{"ruleId":"132","severity":1,"message":"147","line":24,"column":49,"nodeType":"134","messageId":"135","endLine":24,"endColumn":54},{"ruleId":"132","severity":1,"message":"148","line":29,"column":24,"nodeType":"134","messageId":"135","endLine":29,"endColumn":35},{"ruleId":"132","severity":1,"message":"143","line":31,"column":10,"nodeType":"134","messageId":"135","endLine":31,"endColumn":18},{"ruleId":"132","severity":1,"message":"141","line":91,"column":21,"nodeType":"134","messageId":"135","endLine":91,"endColumn":33},{"ruleId":"132","severity":1,"message":"149","line":92,"column":16,"nodeType":"134","messageId":"135","endLine":92,"endColumn":23},{"ruleId":"132","severity":1,"message":"150","line":93,"column":17,"nodeType":"134","messageId":"135","endLine":93,"endColumn":25},{"ruleId":"132","severity":1,"message":"151","line":25,"column":9,"nodeType":"134","messageId":"135","endLine":25,"endColumn":16},{"ruleId":"132","severity":1,"message":"152","line":20,"column":10,"nodeType":"134","messageId":"135","endLine":20,"endColumn":26},{"ruleId":"132","severity":1,"message":"153","line":23,"column":10,"nodeType":"134","messageId":"135","endLine":23,"endColumn":28},{"ruleId":"132","severity":1,"message":"141","line":83,"column":21,"nodeType":"134","messageId":"135","endLine":83,"endColumn":33},{"ruleId":"132","severity":1,"message":"149","line":84,"column":16,"nodeType":"134","messageId":"135","endLine":84,"endColumn":23},{"ruleId":"132","severity":1,"message":"150","line":85,"column":17,"nodeType":"134","messageId":"135","endLine":85,"endColumn":25},{"ruleId":"132","severity":1,"message":"154","line":87,"column":10,"nodeType":"134","messageId":"135","endLine":87,"endColumn":27},{"ruleId":"132","severity":1,"message":"155","line":87,"column":29,"nodeType":"134","messageId":"135","endLine":87,"endColumn":49},{"ruleId":"132","severity":1,"message":"156","line":90,"column":11,"nodeType":"134","messageId":"135","endLine":90,"endColumn":15},{"ruleId":"132","severity":1,"message":"157","line":148,"column":9,"nodeType":"134","messageId":"135","endLine":148,"endColumn":29},{"ruleId":"132","severity":1,"message":"158","line":14,"column":10,"nodeType":"134","messageId":"135","endLine":14,"endColumn":19},{"ruleId":"132","severity":1,"message":"159","line":34,"column":11,"nodeType":"134","messageId":"135","endLine":34,"endColumn":19},"no-unused-vars","'createStore' is defined but never used.","Identifier","unusedVar","no-native-reassign",["160"],"no-negated-in-lhs",["161"],"'startDate' is assigned a value but never used.","'setStartDate' is assigned a value but never used.","'personaldata' is assigned a value but never used.","'Redirect' is defined but never used.","'InboxIcon' is defined but never used.","'MailIcon' is defined but never used.","'HomeIcon' is defined but never used.","'Table' is defined but never used.","'getDateFunc' is defined but never used.","'setYear' is assigned a value but never used.","'setMonth' is assigned a value but never used.","'classes' is assigned a value but never used.","'getStockPersonal' is defined but never used.","'updateStockTrading' is defined but never used.","'stockPersonalData' is assigned a value but never used.","'setStockPersonalData' is assigned a value but never used.","'time' is assigned a value but never used.","'handleUpdatePersonal' is assigned a value but never used.","'Copyright' is defined but never used.","'response' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]